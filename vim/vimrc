" this isn't vi
set nocompatible
" turn on filetype detection and filetype-specific plugins and indentation
filetype plugin indent on
" turn on syntax highlighting
syntax enable

" TABS
" number of spaces that a <Tab> counts for
set tabstop=2
" number of spaces to use for each step of (auto)indent
set shiftwidth=2
" same like those above, more or less - maybe...
set softtabstop=2
" expand all tabs to spaces
set expandtab
" make <Tab> work a bit better - I think...
set smarttab
" indent to a multiple of shiftwidth instead of inserting (expanded) <Tab>s
set shiftround
" copy indent from current line when starting a new line
" but discard the indentation if the line remains empty
set copyindent
set autoindent

" VISUALS
" show relative line numbers
set number
set relativenumber
" show the line and column number of the cursor - has no effect with vim-airline
set ruler
" don't jump to matching brackets when inserting
set noshowmatch
" show command in status line - I don't think this has any effect on vim-airline
set showcmd
" always show 5 lines of context around cursor
set scrolloff=5
" change the title in the terminal showing session tracking
set title
set titlestring=%{ObsessionStatus('[R]','[x]')}%(\ %)%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}
" add some pairs of matching characters - assignment/semicolon is debatable...
set matchpairs+=<:>,=:;
" no need to have vim show the mode, that is shown in airline
set noshowmode

" SEARCH
" search incrementally and highlight matches
set incsearch
set hlsearch
" use case-sensitive search only when searching for uppercase chars
set ignorecase
set smartcase
" always assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" FORMATTING/EDITING
" allow deleting beyond newly-inserted text
set backspace=indent,eol,start
" maximum width of text - I want to do my own linebreaks (usually)
set textwidth=256
" This is a sequence of letters which describes how
" set up automatic formatting: (TODO: there are way more to check out)
" t: auto-wrap text after textwidth (non-comments)
" c: wrap comments and automatically insert comment leader
" q: format comments with 'gq'
" r: insert comment leader when starting new line from comment in insert mode
" j: remove comment leader when joining
set formatoptions=c,q,r,t,j

" CLIPBOARD
" enable the mouse in the following modes
" NOTE: if there's an issue, go back to 'nr'
" NOTE: also checkout `ttymouse` option
set mouse=a
" share the plus register with the system clipboard
set clipboard=unnamedplus

" MISC
" use default linux encoding in vim
set encoding=utf-8

" use a shorter time when waiting for keypress (eg after leader)
set timeoutlen=500
set ttimeoutlen=100

" in insert mode with spell-checking, use dictionary for word completion
" NOTE: Currently only completes manually (<C-n>)
set complete+=kspell

" change history and undo size
set history=1000
set undolevels=1000

" open new split panes to right and bottom
set splitbelow
set splitright

" assign leaders - do that before defining any leader-mappings!
let mapleader = "\<Space>"
let localmapleader = "\\"

" improve command line completion menu
set wildmenu

" command wildchar expansion: show all matches, then start completing
set wildmode=list:longest,full
" ignore some file types when completing
set wildignore+=*.class,*.swp,*.pyc,__init__.py,*.pkl,*.png,*.jpg

" tell vim to also check for tags in .git
set tags+=.git/tags

" reduce the things to store in session file...
set sessionoptions=blank,buffers,curdir,help,tabpages,winsize
" ... store even less in views
set viewoptions=cursor,folds

" remember vim home directory
let $VIMHOME=expand('<sfile>:p:h')

" don't hide unsaved buffers
set nohidden

" open help files in new tabs
" autocmd! FileType help call functions#HelpInNewTab()
cnoreabbrev help tab help
" jump to last cursor position when opening a file
autocmd! BufReadPost * call functions#SetLastCursorPosition()
" turn paste mode off when leaving insert mode
autocmd! InsertLeave * set nopaste

" map TeX placeholder movement
" NOTE: mapping them here (before vim-latex is potentially loaded) because
" it re-maps <C-j> if `<Plug>IMAP_JumpForward` isn't already mapped
imap <Localleader>j <Plug>IMAP_JumpForward
nmap <Localleader>j <Plug>IMAP_JumpForward
imap <Localleader>kk <Plug>IMAP_JumpBackward
nmap <Localleader>kk <Plug>IMAP_JumpBackward
" interpret all .tex files as latex files (this also can't be in ftplugin)
let g:tex_flavor = "latex"

" NOT doing any vimrc re-sourcing because that leads to all sorts of problems...
" augroup OnVimrcChanged
"   " stuff to execute whenever vimrc changed...
"   au!
"   " ... load new vimrc
"   autocmd BufWritePost $MYVIMRC source $MYVIMRC
"   " ... refresh plugins that sometimes struggle
"   " autocmd BufWritePost $MYVIMRC AirlineRefresh
"   autocmd BufWritePost $MYVIMRC source $VIMHOME/bundle/camelcasemotion/autoload/camelcasemotion.vim
"   autocmd BufWritePost $MYVIMRC source $VIMHOME/bundle/ctrlp.vim/autoload/ctrlp.vim
" augroup END

" macro to close fold and go to the next line
let @q = 'zc<CR>'

" redefine `gx` as a workaround until it's fixed...
nmap gx yiW:!xdg-open <cWORD><CR> <C-r>" & <CR><CR>

" helps e.g. with gitgutter
set updatetime=200

" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Plugins {{{
call plug#begin('~/.config/nvim/plugged')

" COC and main extensions
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'neoclide/coc-tabnine', {'do': 'yarn install --frozen-lockfile'}
Plug 'iamcco/coc-spell-checker', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-snippets', {'do': 'yarn install --frozen-lockfile'}
" python
Plug 'fannheyward/coc-pyright', {'do': 'yarn install --frozen-lockfile'}
" other language-specific things
Plug 'josa42/coc-sh', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-json', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-yaml', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-html', {'do': 'yarn install --frozen-lockfile'}

" navigation
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-unimpaired'
Plug 'bkad/CamelCaseMotion'
Plug 'haya14busa/vim-asterisk'

" editing
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'honza/vim-snippets'
Plug 'flwyd/vim-conjoin'
Plug 'andymass/vim-matchup'
Plug 'AndrewRadev/deleft.vim'
Plug 'simnalamburt/vim-mundo'
Plug 'machakann/vim-swap'

" filetype specific
Plug 'vim-python/python-syntax'
Plug 'mechatroner/rainbow_csv'
Plug 'gu-fan/mathematic.vim'
Plug 'whiteinge/diffconflicts'
Plug 'xolox/vim-notes' | Plug 'xolox/vim-misc', {'as': 'vim-notes-misc'}

" visual
Plug 'furgerf/gruvbox'
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'Yggdroot/indentLine'
Plug 'lfv89/vim-interestingwords'
Plug 'RRethy/vim-illuminate'
Plug 'lilydjwg/colorizer'

" general/miscellaneous
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'vim-syntastic/syntastic'
Plug 'EinfachToll/DidYouMean'
Plug 'mhinz/vim-startify'
Plug 'preservim/tagbar'
Plug 'moll/vim-bbye'
Plug 'pseewald/vim-anyfold'
Plug 'terryma/vim-expand-region'
Plug 'wesQ3/vim-windowswap'
Plug 'vim-test/vim-test'
Plug 'szw/vim-maximizer'

call plug#end()
" }}}

