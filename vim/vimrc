" this isn't vi
set nocompatible
" turn on filetype detection and filetype-specific plugins and indentation
filetype plugin indent on
" turn on syntax highlighting
syntax enable

" TABS
" number of spaces that a <Tab> counts for
set tabstop=2
" number of spaces to use for each step of (auto)indent
set shiftwidth=2
" same like those above, more or less - maybe...
set softtabstop=2
" expand all tabs to spaces
set expandtab
" make <Tab> work a bit better - I think...
set smarttab
" indent to a multiple of shiftwidth instead of inserting (expanded) <Tab>s
set shiftround
" copy indent from current line when starting a new line
" but discard the indentation if the line remains empty
set copyindent
set autoindent

" VISUALS
" show relative line numbers
set number
set relativenumber
" show the line and column number of the cursor - has no effect with vim-airline
set ruler
" briefly jump to matching brackets when inserting
set showmatch
" show command in status line - I don't think this has any effect on vim-airline
set showcmd
" always show 5 lines of context around cursor
set scrolloff=5
" change the title in the terminal showing session tracking
set title
set titlestring=%{ObsessionStatus('[R]','[x]')}%(\ %)%t%(\ %M%)%(\ (%{expand(\"%:p:h\")})%)%(\ %a%)\ -\ %{v:servername}
" add some pairs of matching characters - assignment/semicolon is debatable...
set matchpairs+=<:>,=:;

" SEARCH
" search incrementally and highlight matches
set incsearch
set hlsearch
" use case-sensitive search only when searching for uppercase chars
set ignorecase
set smartcase
" always assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" FORMATTING/EDITING
" allow deleting beyond newly-inserted text
set backspace=indent,eol,start
" maximum width of text - I want to do my own linebreaks (usually)
set textwidth=256
" This is a sequence of letters which describes how
" set up automatic formatting: (TODO: there are way more to check out)
" t: auto-wrap text after textwidth (non-comments)
" c: wrap comments and automatically insert comment leader
" q: format comments with 'gq'
" r: insert comment leader when starting new line from comment in insert mode
set formatoptions=c,q,r,t

" CLIPBOARD
" enable the mouse in the following modes
" NOTE: if there's an issue, go back to 'nr'
set mouse=a
" share the plus register with the system clipboard
" TODO: check out h x11-selection to maybe understand and configure better
set clipboard=unnamedplus

" MISC
" use default linux encoding in vim
set encoding=utf-8

" use a shorter time when waiting for keypress (eg after leader)
set timeoutlen=500

" in insert mode with spell-checking, use dictionary for word completion
" NOTE: Currently only completes manually (<C-n>)
set complete+=kspell

" change history and undo size
set history=1000
set undolevels=1000

" modify grep command
" NOTE: this should possibly be changed
set grepprg=grep\ -nH\ $*

" open new split panes to right and bottom
set splitbelow
set splitright

" assign leaders - do that before defining any leader-mappings!
let mapleader = "\<Space>"
let localmapleader = "\\"

" command wildchar expansion: show all matches, then start completing
set wildmode=list:longest,full
" ignore some file types when completing
set wildignore+=*.swp,*.pyc,__init__.py

" do not store runtimepath in session file - that doesn't work with pathogen
set sessionoptions-=options

" manually set the runtime path - I don't think that's needed (anymore)
" set runtimepath=~/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,~/.vim/after

" remember vim home directory
let $VIMHOME=expand('<sfile>:p:h')

" load pathogen
execute pathogen#infect()
" in case help text is missing, run `call pathogen#helptags()` or `Helptags`


"============================================================================
" Make :help appear in a full-screen tab, instead of a window
"============================================================================

"Only apply to .txt files...
augroup HelpInTabs
  autocmd!
  autocmd BufEnter *.txt call functions#HelpInNewTab()
augroup END

" NOT doing any vimrc re-sourcing because that leads to all sorts of problems...
" augroup OnVimrcChanged
"   " stuff to execute whenever vimrc changed...
"   au!
"   " ... load new vimrc
"   autocmd BufWritePost $MYVIMRC source $MYVIMRC
"   " ... refresh plugins that sometimes struggle
"   " autocmd BufWritePost $MYVIMRC AirlineRefresh
"   autocmd BufWritePost $MYVIMRC source $VIMHOME/bundle/camelcasemotion/autoload/camelcasemotion.vim
"   autocmd BufWritePost $MYVIMRC source $VIMHOME/bundle/ctrlp.vim/autoload/ctrlp.vim
" augroup END

" Jump to last cursor position when opening a file
autocmd BufReadPost * call functions#SetLastCursorPosition()

" turn paste mode off when leaving insert mode
autocmd InsertLeave * set nopaste

" map TeX placeholder movement
" NOTE: mapping them here (before vim-latex is potentially loaded) because
" it re-maps <C-j> if `<Plug>IMAP_JumpForward` isn't already mapped
imap <Localleader>j <Plug>IMAP_JumpForward
nmap <Localleader>j <Plug>IMAP_JumpForward
imap <Localleader>k <Plug>IMAP_JumpBackward
nmap <Localleader>k <Plug>IMAP_JumpBackward

