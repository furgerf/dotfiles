[user]
  name = Fabian Furger
  email = furgerfabian@hotmail.com
[color]
  ui = true
[color "diff-highlight"]
  changeHunkIndicators = true
  oldNormal = "red bold"
  oldHighlight = "red bold 52"
  newNormal = "green bold"
  newHighlight = "green bold 22"
[core]
  editor = vim
  excludesFile = ~/.gitignore
  # use diff-so-fancy when paging and use a default pattern for easier diff navigation
  # Note: using the pattern invalidates -F (quit less if it fits on the screen)
  pager = "diff-so-fancy | less -RFX --pattern='^(Author|added|deleted|modified): '"
[fetch]
  prune = true
[pull]
  rebase = true
[push]
  default = simple
[merge]
  ff = only
[commit]
  verbose = true
[status]
  showUntrackedFiles = all
[advice]
  statusHints = false
[transfer]
  fsckobjects = true
[pager]
  stash = false
[alias]
  #################
  # general stuff #
  #################
  # list all aliases
  aliases = !git var -l | grep -e "^alias" | cut -d '.' -f 2-
  # shortcut to amend comit
  amend = commit --amend
  amnd = commit --amend --no-edit
  # list all ignored files
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  # delete all merged local branches except the current
  prune-local = !git branch --merged | grep -v '*' | xargs -n1 git branch -d
  # short status output
  st = status --short --branch
  shorty = status --short --branch
  # unstage everything from index
  unstage = reset HEAD
  # list conflicted files
  conflict = diff --name-only --diff-filter=U
  # list all todos
  todo = grep -C 2 -n TODO
  # create patch output
  patch = !git --no-pager diff --no-color
  # "fix" index by removing the index file and resetting
  fix-index = !rm "$(pwd)/.git/index" && git reset

  ########################
  # working with history #
  ########################
  # list all different authors with their respective commit counts
  authors = shortlog -s -n --all
  # show commit graph
  graph = log --graph --abbrev-commit --pretty=oneline --decorate
  # fancier commit graph
  grog = !git log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
  # show-branch with current branch and origin/master
  sb = !git show-branch $(git rev-parse --abbrev-ref HEAD) origin/master
  # show-branch-all local branches and origin/master
  sba = !git show-branch $(git for-each-ref --format='%(refname:short)' refs/heads) origin/master
  # list changed files in a commit
  changed-files = diff-tree --no-commit-id --name-only -r
  # trigger ctag generation using script from hook
  ctags = "!bash -c '[ -f .git/hooks/ctags ] || git init; .git/hooks/ctags' git-ctags"
  # swap the last two commits
  swap = "!GIT_SEQUENCE_EDITOR=\"sed -i -n 'h;1n;2p;g;p'\" git rebase -i HEAD~2"

  ########################
  # working with remotes #
  ########################
  fa = !git fetchall && git sba
  # fetch all remotes
  fetchall = fetch --all
  # rebase on origin/master
  rom = rebase origin/master --autostash
  # gerrit-publish
  publish = push --progress \"origin\" HEAD:refs/publish/master
  # `push --force` that fails if someone else pushed in the meantime
  please = push --force-with-lease

  #########################
  # working with branches #
  #########################
  # laziness...
  b = branch -v
  bd = branch -d
  bdf = branch -D
  bmv = branch -m
  co = checkout
  cob = checkout -b
  cp = cherry-pick

  ######################
  # working with stash #
  ######################
  # laziness...
  ss = !git stash save
  sp = !git stash pop
  sl = !git stash list

  # stash only unstaged changes to tracked files
  stsh = stash --keep-index
  # (`stash` stashes all (un-)staged changes to tracked files)
  # stash untracked and tracked files
  staash = stash --include-untracked
  # stash ignored, untracked, and tracked files
  staaash = stash --all

  # stash changes to tracked files in a "WIP" commit
  wip = !git add -u && git commit -m 'WIP'
  # stash all changes in a "SAVEPOINT" commit
  save = !git add -A && git commit -m 'SAVEPOINT'
  # "undoes" a wip/save commit by resetting to the previous commit
  undo = reset HEAD~1 --mixed
  # create and discard a "WIPE SAVEPOINT" commit
  wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  # stash, rebase, unstash
  srp = !git stash --include-untracked && git rom && git stash pop

  ###########################
  # working with submodules #
  ###########################
  # recursively initialize submodules (after cloning a repo)
  sub-init = !git submodule update --init --recursive
  # pull all submodules
  sub-update = !git submodule foreach git pull origin master
[push]
  default = matching
[http]
  sslVerify = false
[credential]
  helper = cache
#[mailmap]
#  file = ~/.mailmap
[init]
  templatedir = ~/.git-templates
[help]
  autocorrect = 1
[url "git@github.com:"]
  insteadOf = gh:

# vim: set ft=conf:
